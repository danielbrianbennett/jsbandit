load("~/Documents/Git/jsbandit/data/banditData_v2point2.RData")
sorted.data
head(sorted.data)
sorted.data2 <- read.csv("bandit_v3.csv")
setwd("~/Documents/Git/jsbandit/data")
sorted.data2 <- read.csv("bandit_v3.csv")
head(sorted.data2)
sorted.data[1:100,]
View(sorted.data)
rm(list = ls())
sorted.data <- read.csv("bandit_v3.csv")
install.packages("ggplot2")
library(ggplot2)
sorted.data["changeLag"] <- NA
sorted.data["filledChosen"] <- NA
sorted.data["switchChoice"] <- NA
IDs <- unique(sorted.data$ID)
weirdParticipants <- c()
p <- 1
block <- 1
temp.data <- sorted.data[sorted.data$ID == IDs[p] & sorted.data$block == block,]
temp.data
if (length(temp.data$trial) != nTrials) {
weirdParticipants <- c(weirdParticipants, unique(temp.data$ID))
}
nBlocks <- 3
nTrials <- 30
changeNumber <- match(unique(temp.data$whichFilled),temp.data$whichFilled)[2]
temp.data[,"changeLag"] <- temp.data$trial - changeNumber
temp.data[temp.data$changeLag >= 0,]$changeLag = temp.data[temp.data$changeLag >= 0,]$changeLag + 1
whichFilled <- unique(temp.data$whichFilled)[2]
test <- temp.data$choice == as.character(whichFilled)
if (any(test)){
temp.data[test,]$filledChosen <- 1
}
if (!all(test)){
temp.data[!test,]$filledChosen <- 0
}
sorted.data[sorted.data$ID == IDs[p] & sorted.data$block == block,] <- temp.data
for ( block in 1:nBlocks ) {
# get participant/block data
temp.data <- sorted.data[sorted.data$ID == IDs[p] & sorted.data$block == block,]
# check for weird data
if (length(temp.data$trial) != nTrials) {
weirdParticipants <- c(weirdParticipants, unique(temp.data$ID))
}
# assign changeLag
changeNumber <- match(unique(temp.data$whichFilled),temp.data$whichFilled)[2]
temp.data[,"changeLag"] <- temp.data$trial - changeNumber
temp.data[temp.data$changeLag >= 0,]$changeLag = temp.data[temp.data$changeLag >= 0,]$changeLag + 1
# work out whether filled option was chosen
whichFilled <- unique(temp.data$whichFilled)[2]
test <- temp.data$choice == as.character(whichFilled)
if (any(test)){
temp.data[test,]$filledChosen <- 1
}
if (!all(test)){
temp.data[!test,]$filledChosen <- 0
}
# reassign to sorted.data
sorted.data[sorted.data$ID == IDs[p] & sorted.data$block == block,] <- temp.data
}
temp.data
for ( p in 1:length(IDs) ){
for ( block in 1:nBlocks ) {
# get participant/block data
temp.data <- sorted.data[sorted.data$ID == IDs[p] & sorted.data$block == block,]
# check for weird data
if (length(temp.data$trial) != nTrials) {
weirdParticipants <- c(weirdParticipants, unique(temp.data$ID))
}
# assign changeLag
changeNumber <- match(unique(temp.data$whichFilled),temp.data$whichFilled)[2]
temp.data[,"changeLag"] <- temp.data$trial - changeNumber
temp.data[temp.data$changeLag >= 0,]$changeLag = temp.data[temp.data$changeLag >= 0,]$changeLag + 1
# work out whether filled option was chosen
whichFilled <- unique(temp.data$whichFilled)[2]
test <- temp.data$choice == as.character(whichFilled)
if (any(test)){
temp.data[test,]$filledChosen <- 1
}
if (!all(test)){
temp.data[!test,]$filledChosen <- 0
}
# reassign to sorted.data
sorted.data[sorted.data$ID == IDs[p] & sorted.data$block == block,] <- temp.data
}
}
p
block
temp.data
length(temp.data$trial) != nTrials
library(ggplot2)
sorted.data["changeLag"] <- NA
sorted.data["filledChosen"] <- NA
sorted.data["switchChoice"] <- NA
nBlocks <- 3
nTrials <- 30
IDs <- unique(sorted.data$ID)
weirdParticipants <- c()
for ( p in 1:length(IDs) ){
for ( block in 1:nBlocks ) {
# get participant/block data
temp.data <- sorted.data[sorted.data$ID == IDs[p] & sorted.data$block == block,]
# check for weird data
if (length(temp.data$trial) != nTrials) {
weirdParticipants <- c(weirdParticipants, unique(temp.data$ID))
break
}
# assign changeLag
changeNumber <- match(unique(temp.data$whichFilled),temp.data$whichFilled)[2]
temp.data[,"changeLag"] <- temp.data$trial - changeNumber
temp.data[temp.data$changeLag >= 0,]$changeLag = temp.data[temp.data$changeLag >= 0,]$changeLag + 1
# work out whether filled option was chosen
whichFilled <- unique(temp.data$whichFilled)[2]
test <- temp.data$choice == as.character(whichFilled)
if (any(test)){
temp.data[test,]$filledChosen <- 1
}
if (!all(test)){
temp.data[!test,]$filledChosen <- 0
}
# reassign to sorted.data
sorted.data[sorted.data$ID == IDs[p] & sorted.data$block == block,] <- temp.data
}
}
weirdParticipants
library(ggplot2)
sorted.data["changeLag"] <- NA
sorted.data["filledChosen"] <- NA
sorted.data["switchChoice"] <- NA
nBlocks <- 3
nTrials <- 30
IDs <- unique(sorted.data$ID)
weirdParticipants <- c()
for ( p in 1:length(IDs) ){
for ( block in 1:nBlocks ) {
# get participant/block data
temp.data <- sorted.data[sorted.data$ID == IDs[p] & sorted.data$block == block,]
# check for weird data
if (length(temp.data$trial) != nTrials) {
weirdParticipants <- c(weirdParticipants, unique(temp.data$ID))
break
}
# assign changeLag
changeNumber <- match(unique(temp.data$whichFilled),temp.data$whichFilled)[2]
temp.data[,"changeLag"] <- temp.data$trial - changeNumber
temp.data[temp.data$changeLag >= 0,]$changeLag = temp.data[temp.data$changeLag >= 0,]$changeLag + 1
# work out whether filled option was chosen
whichFilled <- unique(temp.data$whichFilled)[2]
test <- temp.data$choice == as.character(whichFilled)
if (any(test)){
temp.data[test,]$filledChosen <- 1
}
if (!all(test)){
temp.data[!test,]$filledChosen <- 0
}
# reassign to sorted.data
sorted.data[sorted.data$ID == IDs[p] & sorted.data$block == block,] <- temp.data
}
}
# work out which are the weird participants and exclude them
weirdParticipants <- unique(weirdParticipants)
weird.data <- subset(sorted.data, (sorted.data$ID %in% weirdParticipants))
sorted.data <- subset(sorted.data, !(sorted.data$ID %in% weirdParticipants))
# define as either switch or stay
for (i in 1:nrow(sorted.data)) {
if (sorted.data[i,]$trial > 1 && sorted.data[i,]$choice == sorted.data[i-1,]$choice){
sorted.data[i,]$switchChoice <- 0
} else if (sorted.data[i,]$trial > 1 && sorted.data[i,]$choice != sorted.data[i-1,]$choice){
sorted.data[i,]$switchChoice <- 1
}
}
length(unique(sorted.data$ID))
head(sorted.data)
?save
save(list = sorted.data, file = "banditData_v3.RData")
?Save
?Save
?save
save("sorted.data", file = "banditData_v3.RData")
rm(list = ls())
sorted.data <- read.csv("bandit_v4.csv")
library(ggplot2)
sorted.data["changeLag"] <- NA
sorted.data["filledChosen"] <- NA
sorted.data["switchChoice"] <- NA
nBlocks <- 3
nTrials <- 30
IDs <- unique(sorted.data$ID)
weirdParticipants <- c()
for ( p in 1:length(IDs) ){
for ( block in 1:nBlocks ) {
# get participant/block data
temp.data <- sorted.data[sorted.data$ID == IDs[p] & sorted.data$block == block,]
# check for weird data
if (length(temp.data$trial) != nTrials) {
weirdParticipants <- c(weirdParticipants, unique(temp.data$ID))
break
}
# assign changeLag
changeNumber <- match(unique(temp.data$whichFilled),temp.data$whichFilled)[2]
temp.data[,"changeLag"] <- temp.data$trial - changeNumber
temp.data[temp.data$changeLag >= 0,]$changeLag = temp.data[temp.data$changeLag >= 0,]$changeLag + 1
# work out whether filled option was chosen
whichFilled <- unique(temp.data$whichFilled)[2]
test <- temp.data$choice == as.character(whichFilled)
if (any(test)){
temp.data[test,]$filledChosen <- 1
}
if (!all(test)){
temp.data[!test,]$filledChosen <- 0
}
# reassign to sorted.data
sorted.data[sorted.data$ID == IDs[p] & sorted.data$block == block,] <- temp.data
}
}
# work out which are the weird participants and exclude them
weirdParticipants <- unique(weirdParticipants)
weird.data <- subset(sorted.data, (sorted.data$ID %in% weirdParticipants))
sorted.data <- subset(sorted.data, !(sorted.data$ID %in% weirdParticipants))
# define as either switch or stay
for (i in 1:nrow(sorted.data)) {
if (sorted.data[i,]$trial > 1 && sorted.data[i,]$choice == sorted.data[i-1,]$choice){
sorted.data[i,]$switchChoice <- 0
} else if (sorted.data[i,]$trial > 1 && sorted.data[i,]$choice != sorted.data[i-1,]$choice){
sorted.data[i,]$switchChoice <- 1
}
}
length(unique(sorted.data$ID))
save("sorted.data", file = "banditData_v4.RData")
rm(list = ls())
load("~/Documents/Git/jsbandit/data/banditData_v2point2.RData")
length(unique(sorted.data$ID))
version <- "v2point2"
version <- "v2point2"
fileDir <- "~/Documents/Git/jsbandit/data/"
paste(fileDir, version, fileDir)
?paste
# set version
version <- "v2point2" # either v2point2, v3, or v4
fileDir <- "~/Documents/Git/jsbandit/data/"
# load file
filename <- paste0(fileDir, "banditData_", version, ".RData")
filenam,e
filename
?load
# set version
version <- "v2point2" # either v2point2, v3, or v4
fileDir <- "~/Documents/Git/jsbandit/data/"
# load file
filename <- paste0(fileDir, "banditData_", version, ".RData")
load(filename)
rm(list = ls()
# retrieve only data from 5 trials before to 7 trials after a change
proximal.data <- subset(sorted.data, sorted.data$changeLag < 8 & sorted.data$changeLag > -6)
# aggregate choice proportions by lag number across participants
choice.by.lag <- aggregate(proximal.data$filledChosen, by = list(proximal.data$changeLag, proximal.data$ID), FUN = mean)
# get mean and sd choice proportion by lag number
mean.choice.prop <- tapply(choice.by.lag$x, choice.by.lag$Group.1, FUN = mean)
sd.choice.prop <- tapply(choice.by.lag$x, choice.by.lag$Group.1, FUN = sd)
choice.prop <- data.frame(mean.choice.prop, sd.choice.prop)
# create plot
choice.prop.chart <- ggplot(choice.prop,
aes(x = as.numeric(rownames(choice.prop)), y = mean.choice.prop)) +
geom_ribbon(aes(ymin = pmax(0, mean.choice.prop - sd.choice.prop), ymax = pmin(mean.choice.prop + sd.choice.prop,1)),
colour = "gray",fill = "gray", alpha = 0.7) +
geom_line(size = 2) +
geom_point(size = 4, shape = 21, fill = "white") +
xlim(-5,7) +
ylim(0,1) +
labs(x = "Change Lag", y = "Oddball Choice Proportion", title = "Oddball Choice Proportion Pre/Post Change") +
theme(axis.text = element_text(size = 14), plot.title = element_text(size = 20), axis.title = element_text(size = 16, face = "bold")) +
scale_x_continuous(breaks = c(-5:-1, 1:7))
# build plot
choice.prop.chart
proximal.data <- subset(sorted.data, sorted.data$changeLag < 8 & sorted.data$changeLag > -6)
choice.by.lag <- aggregate(proximal.data$filledChosen, by = list(proximal.data$changeLag, proximal.data$ID), FUN = mean)
mean.choice.prop <- tapply(choice.by.lag$x, choice.by.lag$Group.1, FUN = mean)
sd.choice.prop <- tapply(choice.by.lag$x, choice.by.lag$Group.1, FUN = sd)
choice.prop <- data.frame(mean.choice.prop, sd.choice.prop)
choice.prop.chart <- ggplot(choice.prop,
aes(x = as.numeric(rownames(choice.prop)), y = mean.choice.prop)) +
geom_ribbon(aes(ymin = pmax(0, mean.choice.prop - sd.choice.prop), ymax = pmin(mean.choice.prop + sd.choice.prop,1)),
colour = "gray",fill = "gray", alpha = 0.7) +
geom_line(size = 2) +
geom_point(size = 4, shape = 21, fill = "white") +
xlim(-5,7) +
ylim(0,1) +
labs(x = "Change Lag", y = "Oddball Choice Proportion", title = "Oddball Choice Proportion Pre/Post Change") +
theme(axis.text = element_text(size = 14), plot.title = element_text(size = 20), axis.title = element_text(size = 16, face = "bold")) +
scale_x_continuous(breaks = c(-5:-1, 1:7))
choice.prop.chart
proximal.data <- subset(sorted.data, sorted.data$changeLag < 8 & sorted.data$changeLag > -6)
proximal.data <- sorted.data
choice.by.lag <- aggregate(proximal.data$filledChosen, by = list(proximal.data$changeLag, proximal.data$ID), FUN = mean)
mean.choice.prop <- tapply(choice.by.lag$x, choice.by.lag$Group.1, FUN = mean)
sd.choice.prop <- tapply(choice.by.lag$x, choice.by.lag$Group.1, FUN = sd)
choice.prop <- data.frame(mean.choice.prop, sd.choice.prop)
choice.prop.chart <- ggplot(choice.prop,
aes(x = as.numeric(rownames(choice.prop)), y = mean.choice.prop)) +
geom_ribbon(aes(ymin = pmax(0, mean.choice.prop - sd.choice.prop), ymax = pmin(mean.choice.prop + sd.choice.prop,1)),
colour = "gray",fill = "gray", alpha = 0.7) +
geom_line(size = 2) +
geom_point(size = 4, shape = 21, fill = "white") +
xlim(-5,7) +
ylim(0,1) +
labs(x = "Change Lag", y = "Oddball Choice Proportion", title = "Oddball Choice Proportion Pre/Post Change") +
theme(axis.text = element_text(size = 14), plot.title = element_text(size = 20), axis.title = element_text(size = 16, face = "bold")) +
scale_x_continuous(breaks = c(-5:-1, 1:7))
choice.prop.chart
# load relevant packages
library(ggplot2)
# clear workspace
rm(list = ls())
# set version
version <- "v2point2" # either v2point2, v3, or v4
fileDir <- "~/Documents/Git/jsbandit/data/"
# load file
filename <- paste0(fileDir, "banditData_", version, ".RData")
load(filename)
# retrieve only data from 5 trials before to 7 trials after a change
proximal.data <- subset(sorted.data, sorted.data$changeLag < 8 & sorted.data$changeLag > -6)
# aggregate choice proportions by lag number across participants
choice.by.lag.short <- aggregate(proximal.data$filledChosen, by = list(proximal.data$changeLag, proximal.data$ID), FUN = mean)
choice.by.lag.long <- aggregate(sorted.data$filledChosen, by = list(proximal.data$changeLag, proximal.data$ID), FUN = mean)
# get mean and sd choice proportion by lag number
mean.choice.prop.short <- tapply(choice.by.lag.short$x, choice.by.lag.short$Group.1, FUN = mean)
sd.choice.prop.short <- tapply(choice.by.lag.short$x, choice.by.lag.short$Group.1, FUN = sd)
choice.prop.short <- data.frame(mean.choice.prop.short, sd.choice.prop.short)
mean.choice.prop.long <- tapply(choice.by.lag.long$x, choice.by.lag.long$Group.1, FUN = mean)
sd.choice.prop.long <- tapply(choice.by.lag.long$x, choice.by.lag.long$Group.1, FUN = sd)
choice.prop.long <- data.frame(mean.choice.prop.long, sd.choice.prop.long)
# create short plot
choice.plot.short <- ggplot(choice.prop,
aes(x = as.numeric(rownames(choice.prop)), y = mean.choice.prop)) +
geom_ribbon(aes(ymin = pmax(0, mean.choice.prop - sd.choice.prop), ymax = pmin(mean.choice.prop + sd.choice.prop,1)),
colour = "gray",fill = "gray", alpha = 0.7) +
geom_line(size = 2) +
geom_point(size = 4, shape = 21, fill = "white") +
xlim(-5,7) +
ylim(0,1) +
labs(x = "Change Lag", y = "Oddball Choice Proportion", title = "Oddball Choice Proportion Pre/Post Change") +
theme(axis.text = element_text(size = 14), plot.title = element_text(size = 20), axis.title = element_text(size = 16, face = "bold")) +
scale_x_continuous(breaks = c(-5:-1, 1:7))
# build short plot
choice.prop.short
# create long plot
choice.plot.long <- ggplot(choice.prop,
aes(x = as.numeric(rownames(choice.prop)), y = mean.choice.prop)) +
geom_ribbon(aes(ymin = pmax(0, mean.choice.prop - sd.choice.prop), ymax = pmin(mean.choice.prop + sd.choice.prop,1)),
colour = "gray",fill = "gray", alpha = 0.7) +
geom_line(size = 2) +
geom_point(size = 4, shape = 21, fill = "white") +
xlim(-5,7) +
ylim(0,1) +
labs(x = "Change Lag", y = "Oddball Choice Proportion", title = "Oddball Choice Proportion Pre/Post Change") +
theme(axis.text = element_text(size = 14), plot.title = element_text(size = 20), axis.title = element_text(size = 16, face = "bold")) +
scale_x_continuous(breaks = c(-5:-1, 1:7))
# build short plot
choice.prop.long
library(ggplot2)
rm(list = ls())
version <- "v2point2" # either v2point2, v3, or v4
fileDir <- "~/Documents/Git/jsbandit/data/"
filename <- paste0(fileDir, "banditData_", version, ".RData")
load(filename)
proximal.data <- subset(sorted.data, sorted.data$changeLag < 8 & sorted.data$changeLag > -6)
choice.by.lag.short <- aggregate(proximal.data$filledChosen, by = list(proximal.data$changeLag, proximal.data$ID), FUN = mean)
choice.by.lag.long <- aggregate(sorted.data$filledChosen, by = list(proximal.data$changeLag, proximal.data$ID), FUN = mean)
mean.choice.prop.short <- tapply(choice.by.lag.short$x, choice.by.lag.short$Group.1, FUN = mean)
sd.choice.prop.short <- tapply(choice.by.lag.short$x, choice.by.lag.short$Group.1, FUN = sd)
choice.prop.short <- data.frame(mean.choice.prop.short, sd.choice.prop.short)
mean.choice.prop.long <- tapply(choice.by.lag.long$x, choice.by.lag.long$Group.1, FUN = mean)
sd.choice.prop.long <- tapply(choice.by.lag.long$x, choice.by.lag.long$Group.1, FUN = sd)
library(ggplot2)
rm(list = ls())
version <- "v2point2" # either v2point2, v3, or v4
fileDir <- "~/Documents/Git/jsbandit/data/"
filename <- paste0(fileDir, "banditData_", version, ".RData")
load(filename)
proximal.data <- subset(sorted.data, sorted.data$changeLag < 8 & sorted.data$changeLag > -6)
choice.by.lag.short <- aggregate(proximal.data$filledChosen, by = list(proximal.data$changeLag, proximal.data$ID), FUN = mean)
choice.by.lag.long <- aggregate(sorted.data$filledChosen, by = list(proximal.data$changeLag, proximal.data$ID), FUN = mean)
# load relevant packages
library(ggplot2)
# clear workspace
rm(list = ls())
# set version
version <- "v2point2" # either v2point2, v3, or v4
fileDir <- "~/Documents/Git/jsbandit/data/"
# load file
filename <- paste0(fileDir, "banditData_", version, ".RData")
load(filename)
# retrieve only data from 5 trials before to 7 trials after a change
proximal.data <- subset(sorted.data, sorted.data$changeLag < 8 & sorted.data$changeLag > -6)
# aggregate choice proportions by lag number across participants
choice.by.lag.short <- aggregate(proximal.data$filledChosen, by = list(proximal.data$changeLag, proximal.data$ID), FUN = mean)
choice.by.lag.long <- aggregate(sorted.data$filledChosen, by = list(sorted.data$changeLag, sorted.data$ID), FUN = mean)
# get mean and sd choice proportion by lag number
mean.choice.prop.short <- tapply(choice.by.lag.short$x, choice.by.lag.short$Group.1, FUN = mean)
sd.choice.prop.short <- tapply(choice.by.lag.short$x, choice.by.lag.short$Group.1, FUN = sd)
choice.prop.short <- data.frame(mean.choice.prop.short, sd.choice.prop.short)
mean.choice.prop.long <- tapply(choice.by.lag.long$x, choice.by.lag.long$Group.1, FUN = mean)
sd.choice.prop.long <- tapply(choice.by.lag.long$x, choice.by.lag.long$Group.1, FUN = sd)
choice.prop.long <- data.frame(mean.choice.prop.long, sd.choice.prop.long)
# create short plot
choice.plot.short <- ggplot(choice.prop,
aes(x = as.numeric(rownames(choice.prop)), y = mean.choice.prop)) +
geom_ribbon(aes(ymin = pmax(0, mean.choice.prop - sd.choice.prop), ymax = pmin(mean.choice.prop + sd.choice.prop,1)),
colour = "gray",fill = "gray", alpha = 0.7) +
geom_line(size = 2) +
geom_point(size = 4, shape = 21, fill = "white") +
xlim(-5,7) +
ylim(0,1) +
labs(x = "Change Lag", y = "Oddball Choice Proportion", title = "Oddball Choice Proportion Pre/Post Change") +
theme(axis.text = element_text(size = 14), plot.title = element_text(size = 20), axis.title = element_text(size = 16, face = "bold")) +
scale_x_continuous(breaks = c(-5:-1, 1:7))
# build short plot
choice.prop.short
# create long plot
choice.plot.long <- ggplot(choice.prop,
aes(x = as.numeric(rownames(choice.prop)), y = mean.choice.prop)) +
geom_ribbon(aes(ymin = pmax(0, mean.choice.prop - sd.choice.prop), ymax = pmin(mean.choice.prop + sd.choice.prop,1)),
colour = "gray",fill = "gray", alpha = 0.7) +
geom_line(size = 2) +
geom_point(size = 4, shape = 21, fill = "white") +
xlim(-5,7) +
ylim(0,1) +
labs(x = "Change Lag", y = "Oddball Choice Proportion", title = "Oddball Choice Proportion Pre/Post Change") +
theme(axis.text = element_text(size = 14), plot.title = element_text(size = 20), axis.title = element_text(size = 16, face = "bold")) +
scale_x_continuous(breaks = c(-5:-1, 1:7))
# build short plot
choice.prop.long
choice.plot.long <- ggplot(choice.prop.long,
aes(x = as.numeric(rownames(choice.prop.long)), y = mean.choice.prop.long)) +
geom_ribbon(aes(ymin = pmax(0, mean.choice.prop.long - sd.choice.prop.long), ymax = pmin(mean.choice.prop.long + sd.choice.prop.long,1)),
colour = "gray",fill = "gray", alpha = 0.7) +
geom_line(size = 2) +
geom_point(size = 4, shape = 21, fill = "white") +
xlim(-5,7) +
ylim(0,1) +
labs(x = "Change Lag", y = "Oddball Choice Proportion", title = "Oddball Choice Proportion Pre/Post Change") +
theme(axis.text = element_text(size = 14), plot.title = element_text(size = 20), axis.title = element_text(size = 16, face = "bold")) +
scale_x_continuous(breaks = c(-5:-1, 1:7))
plot(1)
# load relevant packages
library(ggplot2)
# clear workspace
rm(list = ls())
# set version
version <- "v2point2" # either v2point2, v3, or v4
fileDir <- "~/Documents/Git/jsbandit/data/"
# load file
filename <- paste0(fileDir, "banditData_", version, ".RData")
load(filename)
# retrieve only data from 5 trials before to 7 trials after a change
proximal.data <- subset(sorted.data, sorted.data$changeLag < 8 & sorted.data$changeLag > -6)
# aggregate choice proportions by lag number across participants
choice.by.lag.short <- aggregate(proximal.data$filledChosen, by = list(proximal.data$changeLag, proximal.data$ID), FUN = mean)
choice.by.lag.long <- aggregate(sorted.data$filledChosen, by = list(sorted.data$changeLag, sorted.data$ID), FUN = mean)
# get mean and sd choice proportion by lag number
mean.choice.prop.short <- tapply(choice.by.lag.short$x, choice.by.lag.short$Group.1, FUN = mean)
sd.choice.prop.short <- tapply(choice.by.lag.short$x, choice.by.lag.short$Group.1, FUN = sd)
choice.prop.short <- data.frame(mean.choice.prop.short, sd.choice.prop.short)
mean.choice.prop.long <- tapply(choice.by.lag.long$x, choice.by.lag.long$Group.1, FUN = mean)
sd.choice.prop.long <- tapply(choice.by.lag.long$x, choice.by.lag.long$Group.1, FUN = sd)
choice.prop.long <- data.frame(mean.choice.prop.long, sd.choice.prop.long)
# create short plot
choice.plot.short <- ggplot(choice.prop.short,
aes(x = as.numeric(rownames(choice.prop.short)), y = mean.choice.prop.short)) +
geom_ribbon(aes(ymin = pmax(0, mean.choice.prop.short - sd.choice.prop.short), ymax = pmin(mean.choice.prop.short + sd.choice.prop.short,1)),
colour = "gray",fill = "gray", alpha = 0.7) +
geom_line(size = 2) +
geom_point(size = 4, shape = 21, fill = "white") +
xlim(-5,7) +
ylim(0,1) +
labs(x = "Change Lag", y = "Oddball Choice Proportion", title = "Oddball Choice Proportion Pre/Post Change") +
theme(axis.text = element_text(size = 14), plot.title = element_text(size = 20), axis.title = element_text(size = 16, face = "bold")) +
scale_x_continuous(breaks = c(-5:-1, 1:7))
# build short plot
choice.prop.short
# create long plot
choice.plot.long <- ggplot(choice.prop.long,
aes(x = as.numeric(rownames(choice.prop.long)), y = mean.choice.prop.long)) +
geom_ribbon(aes(ymin = pmax(0, mean.choice.prop.long - sd.choice.prop.long), ymax = pmin(mean.choice.prop.long + sd.choice.prop.long,1)),
colour = "gray",fill = "gray", alpha = 0.7) +
geom_line(size = 2) +
geom_point(size = 4, shape = 21, fill = "white") +
xlim(-5,7) +
ylim(0,1) +
labs(x = "Change Lag", y = "Oddball Choice Proportion", title = "Oddball Choice Proportion Pre/Post Change") +
theme(axis.text = element_text(size = 14), plot.title = element_text(size = 20), axis.title = element_text(size = 16, face = "bold")) +
scale_x_continuous(breaks = c(-5:-1, 1:7))
# build long plot
choice.prop.long
choice.plot.long
choice.plot.short
